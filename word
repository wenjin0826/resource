"use client";
import {MailTwoTone, UserOutlined} from "@ant-design/icons";
import {LoginForm, ProForm, ProFormCaptcha, ProFormText} from "@ant-design/pro-components";
import React from "react";
import {Button, message} from "antd";
import {emailLogin} from "@/api/appUserController";
import {useRouter} from "next/navigation";
import {saveLoginUser, saveToken, SUCCESS_CODE} from "@/commons/global";
import {getText} from "@/commons/locale";
import {sendVerifyCode} from "@/api/verifyCodeController";
import LoginUser = Model.LoginUser;

/**
 * 用户登录页面
 * @constructor
 */
const LoginPage: React.FC = () => {
    const [form] = ProForm.useForm();
    const router = useRouter();

    /**
     * 提交
     */
    const doSubmit = async (paramDTO: API.EmailLoginParamDTO) => {
        try {
            // @ts-ignore
            const res: API.ResultInfoUserSessionDTO = await emailLogin(paramDTO);
            if (res.code == SUCCESS_CODE) {
                let loginUser: LoginUser = {
                    username: paramDTO.email,
                }
                // @ts-ignore
                saveToken(res.data);
                saveLoginUser(loginUser);
                router.push("/");
                router.refresh();
            }
        } catch (e: any) {
            message.error(getText("fail") + ": " + e.message);
            form.resetFields();
        }
    };

    return (
        <div id="loginPage">
            <LoginForm
                form={form}
                title={`${getText("aiaitou")}`}
                subTitle={`${getText("aiaitou_description")}`}
                onFinish={doSubmit}
                submitter={{
                    render: (_, dom) => [
                        <Button key="login" size="large" type="primary" block={true}>
                            {`${getText("login")}`}
                        </Button>,
                    ],
                }}
            >
                <ProFormText
                    name="email"
                    fieldProps={{
                        size: "large",
                        prefix: <UserOutlined/>,
                    }}
                    placeholder={`${getText("please_input_email")}`}
                    rules={[
                        {
                            required: true,
                            message: `${getText("please_input_email")}`,
                        },
                        {
                            type: "email",
                            message: `${getText("please_input_email")}`,
                        }
                    ]}
                />
                <ProFormCaptcha
                    fieldProps={{
                        size: 'large',
                        prefix: <MailTwoTone />,
                    }}
                    captchaProps={{
                        size: 'large',
                    }}
                    // onGetCaptcha 会注入这个值
                    phoneName="email"
                    name="verifyCode"
                    rules={[
                        {
                            required: true,
                            message: `${getText("please_input_verify_code")}`,
                        },
                    ]}
                    placeholder={`${getText("please_input_verify_code")}`}
                    captchaTextRender={(timing, count) => {
                        if (timing) {
                            return `${count} ${getText("verify_code_count_down")}`;
                        }
                        return `${getText("get_verify_code")}`;
                    }}
                    onGetCaptcha={async (email) => {
                        let param: API.sendVerifyCodeParams = {
                            email: email
                        };
                        await sendVerifyCode(param);
                        message.success(`${getText("verify_code_sent")}`);
                    }}
                />
                <div
                    style={{
                        marginBlockEnd: 24,
                        textAlign: "end",
                    }}
                >
                </div>
            </LoginForm>
        </div>
    );
};

export default LoginPage;
